;;;; scribe.lisp

(in-package #:scribe)

(defun split-by (string &optional (sep #\Space))
  (loop for i = 0 then (1+ j)
     as j = (position sep string :start i)
     collect (subseq string i j)
     while j))

(defun read-while (s pred)
  (let (buf)
    (do ((c #1=(peek-char nil s nil #\Nul) #1#))
	((or (char= c #\Nul)
	     (not (funcall pred c))) (coerce (nreverse buf) 'string))
      (push (read-char s) buf))))

(defun |@-reader| (s n)
  (declare (ignore n))
  (let ((category (read-while s (lambda (c) (char/= c #\{))))
	(text (read-while s (lambda (c) (char/= c #\})))))
    (if (char/= (read-char s) #\})
	(error "unexpected end of file; expecting closing }")
	(list (intern (string-upcase category) (find-package "KEYWORD"))
	      (subseq text 1)))))

(defun paragraph-break-p (text)
  (= (length text) 0))

(defun decode (document)
  (mapcan #'decode-fragment document))

(defun decode-fragment (fragment)
  (typecase fragment
    (string (mapcar (lambda (text)
		      (if (paragraph-break-p text)
			  `(:break)
			  `(:raw-string ,text)))
		    (split-by fragment #\Newline)))
    (list (list fragment))
    (t (error "unexpected fragment type ~a" (type-of fragment)))))

(defun process (path)
  (with-open-file (in path)
    (let ((*readtable* (copy-readtable nil)))
      (set-macro-character #\@ #'|@-reader|)
      (do ((fragment #1=(read-fragment in) #1#)
	   doc)
	  ((not fragment) (decode (nreverse doc)))
	(push fragment doc)))))

(defun read-fragment (in)
  (case (peek-char nil in nil #\Nul)
    (#\Nul nil)
    (#\@ (read-preserving-whitespace in nil nil))
    (otherwise (read-while in (lambda (c) (char/= c #\@))))))

(defun to-tex (out ops)
  (format out "\\documentclass[a4paper,12pt]{article}~%~%")
  (format out "\\begin{document}~%")
  (dolist (op ops)
    (case (car op)
      (:title (format out "\\title{~a}~%\\maketitle~%~%" (cadr op)))
      (:bold (format out "\\textbf{~a}" (cadr op)))
      (:italic (format out "\\emph{~a}" (cadr op)))
      (:raw-string (format out "~a" (cadr op)))
      (:break (format out "~%~%"))
      (t (error "unknown opcode ~a" op))))
  (format out "\\end{document}"))
